- how should we handle out-of-range values? Reporting an error may not always
  be the best idea
- a new method of specifying lists
	%key = 10
	%key = 13
	%key = 17
	->
	key = (10, 13, 17)
  mostly useful for sections, in which case it gives a cleaner layout

- make testsuite
- allow validation based on description in own format
	- what should validation do exactly? provide messages on what is wrong, or
		prune everything invalid? The latter is useful, but so is the former.
		And what about missing required stuff? Does that prune the whole
		container? That will run afoul when the container itself is required!
		More obvious answer is that required stuff should have a default value
		as well, which will be substituted if not provided.

types {
	attribute {
		type = "list"
		item_type = "string"
	}
	attributes {
		type = "section"
		allowed_keys {
			non_print { type = "attribute" }
			selection_cursor { type = "attribute" }
			selection_cursor2 { type = "attribute" }
		}
	}
}

allowed_keys {
	wrap {
		type = "bool"
	}
	config_version {
		type = "int"
		allowed_values = ( { min = 0; max = 256} )
		required = true
		default = 1
	}
	hide_menubar {
		type = "bool"
	}
	color {
		type = "bool"
	}
	tabsize {
		type = "int"
		allowed_values = ( ( 1, 16 ) )
	}
	auto_indent {
		type = "bool"
	}
	terminals {
		type = "section"
		unknown_keys {
			type = "section"
			allowed_keys {
				color {
					type = "bool"
				}
				key_timeout {
					type = "int"
					allowed_values = ( { min = -10000; max = 10000 } )
				}
				attributes {
					type = "attributes"
				}
			}
		}
	}
}
